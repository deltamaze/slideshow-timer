@using System.Timers;
@using CyberTimer.Data;

@page "/"
<div class="container">
    <div class="box--outer">
        <div class="box">
            <div class="box--inner">
                <div class="content">
                    <div class="holder">
                        <table class="table centertable">
                            <thead>
                                <tr>
                                    <th class="cyberred">-</th>
                                    <th class="widthcol">Nam</th>
                                    <th class="widthcol">Act</th>
                                    <th class="widthcol">Δ</th>
                                    <th class="widthcol">Est</th>
                                    <th class="cyberred">-</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < splits.Count; i++)
                                {
                                    int index = i;
                                    if (splits[index].EditMode)
                                    {
                                        <tr>
                                            <td class="smallfont">
                                                <button class="smallyellowbutton" @onclick="()=>MoveUp(index)">[▲]</button><button class="smallyellowbutton" @onclick="()=>MoveDown(index)">[▼]</button>
                                             </td>
                                            <td class="widthcol">
                                                <input class="inputname" type="text" @bind-value="splits[index].Name" />
                                            </td>
                                            <td class="widthcol">@splits[index].FormatActualTime()</td>
                                            <td class="widthcol">-</td>
                                            <td class="widthcol"><input class="inputname" type="number" min="0" step="1" @bind-value="splits[index].HourEstimated" />:<input class="inputname" type="number" min="0" max="59" step="1" @bind-value="splits[index].MinuteEstimated" />:<input class="inputname" type="number" min="0" step="1" max="59" @bind-value="splits[index].SecondEstimated" /></td>
                                            <td class="widthcol">
                                                <button class="smallyellowbutton" @onclick="() => RemoveSplit(index)">[Del]</button><button class="smallyellowbutton" @onclick="() => ToggleEditMode(index)">[Sav]</button>
                                            </td>
                                        </tr>
                                    }
                                    else
                                    {
                                        <tr>
                                            <td class="smallfont">
                                                <button class="smallyellowbutton" @onclick="()=>MoveUp(index)">[▲]</button><button class="smallyellowbutton" @onclick="()=>MoveDown(index)">[▼]</button>
                                            </td>
                                            <td class="widthcol">@splits[index].Name</td>
                                            <td class="widthcol">@splits[index].FormatActualTime()</td>
                                            <td class="@(splits[index].DeltaSign ? "deltagreen":"deltared" +" widthcol") " > @splits[index].FormatDelta()</td>
                                            <td class="widthcol">@splits[index].FormattedEstimatedTime()</td>
                                            <td>
                                                @if (index == splitIndex && aTimer.Enabled)
                                                {
                                                    <button class="smallgreenbutton" @onclick="ToggleTimer">[Pau]</button> 
                                                }
                                                else
                                                {
                                                    <button class="smallgreenbutton" @onclick="() => SetSplit(index)">[Sta]</button> 
                                                }
                                                
                                                <button class="smallyellowbutton" @onclick="() => ToggleEditMode(index)">[Edi]</button><button class="smallredbutton" @onclick="() => RemoveSplit(index)">[Del]</button>
                                            </td>
                                        </tr>
                                    }

                                }
                                <tr>
                                    <td><button class="smallgreenbutton" @onclick="AddSplit">[Add]</button></td>
                                </tr>
                            </tbody>
                        </table>
                        <br />
                        <div class="yellow">@(total.HourElapse + total.MinuteElapse + total.SecondElapse !=0 ? total.FormatActualTime() : "00:00")</div>
                        <button class="redbutton" @onclick="ToggleTimer">
                            @(aTimer.Enabled ? "Stop" : "Start")
                        </button>
                        <button class="redbutton" @onclick="NextSplit">Split</button>
                        <button class="redbutton" @onclick="Reset">Reset</button>
                        <br />
                        <div>@total.FormattedEstimatedTime() -----@total.FormatDelta()</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>
@code{
    System.Timers.Timer aTimer = new System.Timers.Timer();

    List<SplitItem> splits = new List<SplitItem>();
    SplitItem total = new SplitItem();
    int mainTimer = 0;
    int splitIndex = 0;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        splits.Add(new SplitItem() { Name = "Task 1", MinuteEstimated = 3 });
        splits.Add(new SplitItem() { Name = "Task 2", MinuteEstimated = 5 });
        splits.Add(new SplitItem() { Name = "Task 3", MinuteEstimated = 10 });

        CalculateTotalEstimation();


        aTimer = new System.Timers.Timer(100);
        // Hook up the Elapsed event for the timer.
        aTimer.Elapsed += OnTimedEvent;
        aTimer.AutoReset = true;
        aTimer.Enabled = false;
    }

    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(IncrementTime);
    }

    private void IncrementTime()
    {
        if (splits.Count == 0)
        {
            // all splits deleted, so stop timer and break
            aTimer.Stop();
            return;
        }
        mainTimer += 1;
        if (mainTimer == 10)
        {
            total.Increment();
            splits[splitIndex].Increment();
            mainTimer = 0;

        }

        StateHasChanged();
    }
    private void Reset()
    {
        total.ResetSplit();
        splits.ForEach(n => n.ResetSplit());
    }
    private void SetSplit(int i)
    {
        aTimer.Enabled = true;
        splitIndex = i;
    }
    private void NextSplit()
    {
        aTimer.Enabled = true;
        if (splitIndex < splits.Count)
        {
            splitIndex += 1;
        }
    }
    private void ToggleTimer()
    {
        aTimer.Enabled = !aTimer.Enabled;
    }
    private void ToggleEditMode(int index)
    {
        splits[index].EditMode = !splits[index].EditMode;
        splits[index].CleanEstimation();
        CalculateTotalEstimation(); // update total estimations
    }
    private void AddSplit()
    {
        splits.Add(new SplitItem() { Name = $"Task {(splits.Count + 1).ToString()}", MinuteEstimated = 5 });
        StateHasChanged();
    }
    private void RemoveSplit(int index)
    {
        if (index == splitIndex)
        {
            aTimer.Enabled = false;
            splitIndex = 0;
        }

        splits.RemoveAt(index);
    }
    private void MoveUp(int index)
    {
        if (index != 0)
        {
            var item = splits[index];
            splits.RemoveAt(index);
            splits.Insert(index - 1, item);
        }

    }
    private void MoveDown(int index)
    {
        if (index != (splits.Count - 1))
        {
            var item = splits[index];
            splits.RemoveAt(index);
            splits.Insert(index + 1, item);
        }
    }
    private void CalculateTotalEstimation()
    {
        total.SecondEstimated = 0;
        total.MinuteEstimated = 0;
        total.HourEstimated = 0;
        foreach (var item in splits)
        {
            total.SecondEstimated += item.SecondEstimated;
            total.MinuteEstimated += item.MinuteEstimated;
            total.HourEstimated += item.HourEstimated;
        }

        total.CleanEstimation();
    }
}